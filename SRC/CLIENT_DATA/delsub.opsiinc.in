;=====================================================================
; delsub.opsiinc AMAZON CORRETTO (MSI)
; Uninstaller type: INNO/MSI
;
; J. Boettge <boettge@mpi-halle.mpg.de>  2019-05-27 14:46:15 +0200
;=====================================================================


;=======================================
[sub_delsub_main]
;=======================================
Message "Removing previous version(s) of " + $ProductName$
ShowBitmap $Img_Prepare$ $ProductName$
marktime

if FileExists("%ScriptPath%\checkinstance.opsiinc")
	include_append "%ScriptPath%\checkinstance.opsiinc"
	sub_checkinstance_init
else
	isFatalError "File not found: checkinstance.opsiinc"
endif


;=== get list of UninstIDs from registry:
if FileExists("%ScriptPath%\uninst_section_search.opsiinc")
	;=== search in registry for available uninstall information
	include_append "%ScriptPath%\uninst_section_search.opsiinc"
	Sub_search_registry_uninstall_keys
endif

if not ( count ($ResultList$) = "0" )
	; ....uninstall informations found in registry
	
	{{#ifdef_property_kill_running}}
	;=== check for / kill running applications from list:
	if ($bCheckInstance$ = "true")
		if ((not ( count($Kill_Applications$) = "0" ))  and ( $bKillRunning$ = "true" ) )
			set $PSDETAIL_MODE$ = "name"
			for %app% in $Kill_Applications$ do sub_kill_Applic
		endif
	endif
	{{/ifdef_property_kill_running}}
	
	if ($ActionRequest$="uninstall") OR ($pr_PreUninst$ = "True")
		;=== process uninstall for all found uninstall sections:
		for %id% in $ResultList$ do sub_Uninstall_ID
		
		;=== custom post uninstall
		comment "include custom post uninstall file"
		if not ($CustomPostUninstall$ = "none")
			if FileExists("%ScriptPath%\custom\" + $CustomPostUninstall$)
				ShowBitmap $Img_Uninstall_Custom$ $ProductName$
				include_insert "%ScriptPath%\custom\" + $CustomPostUninstall$
				ShowBitmap $Img_Uninstall$ $ProductName$
			endif
		endif	
		

	else
		comment "Uninstallation skipped"
	endif	
else
	comment "Empty result list while searching for " + $ProductName$ + " in registry - does not seem to be installed"
endif	

;=== update productOnClient information on depot server
Message "Updating status information on depot"
set $result$ = removeProductVerOnClientStatus($ProductFilter$, $ProductVersionFilter$)

;=== measure time
set $TimeDiff$ = getDiffTimeSec
Message  "Removal time: " + $TimeDiff$ + " seconds"	


;=======================================
[sub_Uninstall_ID]
;=======================================
set $Uninst_ID$    	= takeString(0, splitString("%id%", "|"))
set $Uninst_Arch$  	= takeString(1, splitString("%id%", "|"))

set $RegKey$		="[HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\" + $Uninst_ID$ + "]"

Switch $Uninst_Arch$
	Case "x32"
			set $DisplayName$    	= GetRegistryStringValue32($RegKey$ + " DisplayName")
			set $Inst_Loc$ 			= GetRegistryStringValue32($RegKey$ + " InstallLocation")
			set $Inst_Ver$ 			= GetRegistryStringValue32($RegKey$ + " DisplayVersion")
			set $UninstallString$  	= GetRegistryStringValue32($RegKey$ + " UninstallString")
			; maybe the previous setup was an Inno installer:
			set $RegInno$ 			= GetRegistryStringValue32($RegKey$ + " Inno Setup: Setup Version")
	EndCase
	Case "x64"
			set $DisplayName$    	= GetRegistryStringValue64($RegKey$ + " DisplayName")
			set $Inst_Loc$ 			= GetRegistryStringValue64($RegKey$ + " InstallLocation")
			set $Inst_Ver$ 			= GetRegistryStringValue64($RegKey$ + " DisplayVersion")
			set $UninstallString$   = GetRegistryStringValue64($RegKey$ + " UninstallString")
			; maybe the previous setup was an Inno installer:
			set $RegInno$ 			= GetRegistryStringValue64($RegKey$ + " Inno Setup: Setup Version")
	EndCase
	DefaultCase
			Comment "Invalid architecture for " + $Uninst_ID$ + " given: " + $Uninst_Arch$
	EndCase
EndSwitch


if ($UninstallString$ = "") 
	LogError "Missing UninstallString for [%id%] -- skipping"
else
	comment "Start uninstall sub section for " + $Inst_Ver$ + " (" + $Uninst_Arch$ + ")"
	
	{{#ifdef_property_kill_running}}
	; first: kill runninng instances if requested
	if ($bKillRunning$ = "true")
		set $PSDETAIL_MODE$ = "exe"
		set $CheckProcess$  = $CheckBin$
		sub_checkinstance
	endif
	{{/ifdef_property_kill_running}}	
	
	if not ($RegInno$="")
			comment "Detected previous INNO setup " + $RegInno$
			set $isINNO$ = "1"
			set $Uninst_Opts$ = $INNO_Uninst_Opts$
			
			;=== uninstall (if uninstaller exists)
			if not ($UninstallString$ = "") and fileExists($UninstallString$)
				Sub_Uninstall
			else
				logError "Uninstaller does not exist!"
			endif
	else
		set $isINNO$ = "0"
		if (strPos(lower($UninstallString$), 'msiexec')="1")
			comment "Detected previous MSI setup"
			set $isMSI$ = "1"
			set $Uninst_Opts$ = $MSI_Uninst_Opts$
			; fix uninstall string:
			set $UninstallString$   = lower(stringReplace($UninstallString$,' /i',' /x'))
			Sub_Uninstall
		else
			comment "Neighter INNO or MSI uninstaller detected"
			set $isMSI$ = "0"
			logError   "Unhandled uninstaller - ignoring!"
			logWarning "Code still missing here..."
		endif
	endif
endif


;======================================================================
[Sub_Uninstall]
;======================================================================
ShowBitmap $Img_Uninstall$ $ProductName$
Message "Uninstalling previous setup of " + $ProductName$ + " " + $Inst_Ver$

;=== get uninstall directory
sub_check_PathVar

;=== compare current InstallLocation with InstallDir from this package:
;if not ($Uninst_RegDir$ = lower($InstallDir$))
;	logWarning "Current installation is not at the expected location:"
;	comment "   Current InstallLocation: [" + $Uninst_RegDir$ + "]"
;	comment "   Expected Location:       [" + $InstallDir$ + "]"
;endif

;=== compare current Uninstaller with InstallDir from this package:
;...this is not practicable as we expect MSI or INNO
;if not (lower($Uninstaller$) = lower(stringReplace($UninstallString$,'"','')))
;	logWarning "Expected $UninstallString$ from registry does not match $Uninstaller$ from package:"
;	comment "   [" + $UninstallString$ + "] <> [" + $Uninstaller$ + "]"
;endif


;=== run uninstaller
LinkFolder_RemoveDesktopLink
Winbatch_Uninstall
if ($isINNO$="1")
	sub_check_exitcode_inno
else
	sub_check_exitcode_msi
endif	
if ($ExitCode$ = "0") and not ($Uninst_RegDir$ = "")
		;=== wait for cleanup
		sleepSeconds 2
		;=== does the installation directory still exist?
		if (FileExists($Inst_Loc$))
			logWarning "Install directory still exists: [" + $Inst_Loc$ + "]"
			;=== try final cleanup
			Files_del_InstallDir
		endif
endif

if ($pr_set_jar_handler$ = "true")
	; unset FTYPE for JAR files an deASSOC the handler
	ShellInAnIcon_UnsetFtypeAndAssoc
endif

;remove variables from HKLM\SOFTWARE\JavaSoft
if ($ProductMajor$ = "11")
	Switch $Uninst_Arch$
		Case "x32"
			set $CurrentVersion$ = GetRegistryStringValue32("[HKLM\SOFTWARE\JavaSoft\Java Runtime Environment] CurrentVersion")
			if not($CurrentVersion$="") and (strPos($Inst_Ver$, $CurrentVersion$) = "1")
				Registry_Cleanup_JavaSoft /32Bit
			endif
		EndCase
		Case "x64"
			set $CurrentVersion$ = GetRegistryStringValue64("[HKLM\SOFTWARE\JavaSoft\Java Runtime Environment] CurrentVersion")
			if not($CurrentVersion$="") and (strPos($Inst_Ver$, $CurrentVersion$) = "1")
				Registry_Cleanup_JavaSoft /64Bit
			endif
		EndCase
	EndSwitch	
endif

; workaround for faulty MSI:
;if Set $pr_SetEnv_JavaHome$	= "true"
	set $Env_Java_Home$ = getEnvVar("JAVA_HOME")
	if ( (not($Env_Java_Home$ = "")) and (strpos(lower($Env_Java_Home$), lower($InstallDir$)) INT>= "0") )
		set $result$ = delEnvVar("JAVA_HOME")
	endif
;endif


;======================================================================
[Winbatch_Uninstall]
;======================================================================
; "$Uninstaller$" $Uninst_Opts$
$UninstallString$  $Uninst_Opts$


;======================================================================
[Files_del_InstallDir]
;======================================================================
delete -sfc "$Uninst_RegDir$"


;======================================================================
[ShellInAnIcon_UnsetFtypeAndAssoc]
;======================================================================
assoc .jar=
ftype $StrippedProductId$.JarFile=


;=====================================================================
[LinkFolder_RemoveDesktopLink]
;=====================================================================
set_basefolder common_desktopdirectory
set_subfolder ""
delete_element $ProductName$


;======================================================================
[sub_check_Exitcode]
;======================================================================
set $ExitCode$ = getLastExitCode
if not ($ExitCode$ = "0")
	logWarning "Last operation returned exitcode " + $ExitCode$
endif


;======================================================================
[sub_check_PathVar]
;======================================================================
if ($Inst_Loc$ = "")
	;===get install location from $UninstallString$
	set $Uninst_RegDir$ = lower(ExtractFilePath($Uninst_RegDir$))
else 
	set $Uninst_RegDir$ = stringReplace(lower($Inst_Loc$) + "\", "\\", "\")
endif


;======================================================================
[sub_kill_Applic]
;======================================================================
if not ("%app%" = "")
	set $CheckProcess$  = "%app%"
	sub_checkinstance
endif


;======================================================================
[Registry_Cleanup_JavaSoft]
;======================================================================
openKey [HKLM\SOFTWARE\JavaSoft\Java Development Kit]
deleteVar "CurrentVersion"
deleteKey [HKLM\SOFTWARE\JavaSoft\Java Development Kit\$CurrentVersion$]

openKey [HKLM\SOFTWARE\JavaSoft\Java Runtime Environment]
deleteVar "CurrentVersion"
deleteKey [HKLM\SOFTWARE\JavaSoft\Java Runtime Environment\$CurrentVersion$]


