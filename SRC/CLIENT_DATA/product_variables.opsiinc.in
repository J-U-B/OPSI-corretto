;=====================================================================
; product specific variables AMAZON CORRETTO
;
; J. Boettge <boettge@mpi-halle.mpg.de>  2024-04-17 10:03:38 +0200
;=====================================================================

include_insert "%ScriptPath%\variables.opsiinc"

Set $MAP$               = getProductMap
Set $FullProductId$     = getValue("id", $MAP$)
Set $ProductName$       = getValue("name", $MAP$)
Set $Version$           = getValue("ProductVersion", $MAP$)
Set $ActionRequest$     = getValue("actionrequest", $MAP$)
Set $InstalledVersion$  = getValue("installedVersion", $MAP$)
Set $SystemType$        = GetSystemType
Set $NTVersion$         = GetMsVersionInfo
Set $Stage$             = lower("{{STAGE}}")

requiredWinstVersion >= "4.11.6"

;-----------------------------------------------------------
;*** helper functions
;-----------------------------------------------------------
importlib "helpers.opsifunc"

;-----------------------------------------------------------
;*** basic requirements
;-----------------------------------------------------------

if CompareDotSeparatedNumbers($NTVersion$, "<", "6.1")
	LogError "OS is not Windows 7 or above"
	isFatalError
endif

{{#ifdef_x64_only}}
if not ($SystemType$ = "64 Bit System")
	LogError "OS is not a 64 bit system but this package contains only 64 bit software"
	isFatalError
endif
{{/ifdef_x64_only}}
{{^ifdef_x64_only}}
if not ($SystemType$ = "64 Bit System")
	; isFatalError "OS is not a 64 Bit System"
	LogWarning "OS is not a 64 Bit System; 32 Bit is not explicitly supported"
endif
{{/ifdef_x64_only}}

;-----------------------------------------------------------
;*** get LogLevel from property
;-----------------------------------------------------------
Set $LogLevelDefault$ = GetProductProperty("log_level","default")

;-----------------------------------------------------------
;*** detect testing package:
;-----------------------------------------------------------
if (strPos($FullProductId$, "0_") = "0") and (strPos($FullProductId$, "test_") = "0") and (strPos($Stage$,"test") = "0")
	; not a testing package
	comment "INFO: RELEASE package detected"
	set $ProductId$  	= $FullProductId$ 
	set $Testing$ 		= "false"
	if ($LogLevelDefault$ = "default")
		set $LogLevelDefault$  	= "{{DEFAULT_RELEASE_LOGLEVEL}}"
	endif
else
	; this is a testing package
	comment "INFO: TESTING package detected"
	if (strPos($FullProductId$, "0_") = "0") and (strPos($FullProductId$, "test_") = "0")
		set $ProductId$	= $FullProductId$
	else
		set $ProductId$	= strPart($FullProductId$, calculate(strPos($FullProductId$,"_") + "+1"), strLength($FullProductId$))
	endif
	set $Testing$ 		= "true"
	if ($LogLevelDefault$ = "default")
		set $LogLevelDefault$  	= "{{DEFAULT_TESTING_LOGLEVEL}}"
	endif
endif
setlogLevel = $LogLevelDefault$

;-----------------------------------------------------------
;*** detect O4I/DFN package:
;-----------------------------------------------------------
if (strPos($FullProductId$, "o4i_") = "0") AND (strPos($FullProductId$, "dfn_") = "0")
	set $isO4I$ = "false"
	set $StrippedProductId$ = $ProductId$
else
	set $isO4I$ = "true"
	set $StrippedProductId$ = strPart($ProductId$,"5",strLength($ProductId$))
endif


;-----------------------------------------------------------
;*** Images
;-----------------------------------------------------------
;set $Img_BaseName$ = $StrippedProductId$
set $Img_BaseName$ = "corretto"

if (FileExists("%ScriptPath%\..\lib\icons\%installingProdName%.png"))
	set $Img_Install$			= "%ScriptPath%\..\lib\icons\%installingProdName%.png"
	set $Img_Install_Custom$	= "%ScriptPath%\..\lib\icons\%installingProdName%.png"
	Set $Img_Uninstall$			= "%ScriptPath%\..\lib\icons\%installingProdName%.png"
	Set $Img_Uninstall_Custom$	= "%ScriptPath%\..\lib\icons\%installingProdName%.png"
	Set $Img_Prepare$			= "%ScriptPath%\..\lib\icons\%installingProdName%.png"
	Set $Img_Plugins$			= "%ScriptPath%\..\lib\icons\%installingProdName%.png"
	Set $Img_Config$			= "%ScriptPath%\..\lib\icons\%installingProdName%.png"
	Set $Img_Update$			= "%ScriptPath%\..\lib\icons\%installingProdName%.png"
else
	if ($isO4I$ = "true")
		set $Img_Install$		= "%ScriptPath%\images\" + $Img_BaseName$ + "_install_o4i.png"
	else
		set $Img_Install$		= "%ScriptPath%\images\" + $Img_BaseName$ + "_install.png"
	endif
	Set $Img_Config$			= "%ScriptPath%\images\" + $Img_BaseName$ + "_config.png"
	Set $Img_Install_Custom$	= "%ScriptPath%\images\" + $Img_BaseName$ + "_install_custom.png"
	Set $Img_Uninstall$			= "%ScriptPath%\images\" + $Img_BaseName$ + "_uninstall.png"
	Set $Img_Uninstall_Custom$	= "%ScriptPath%\images\" + $Img_BaseName$ + "_uninstall_custom.png"
	Set $Img_Prepare$			= "%ScriptPath%\images\" + $Img_BaseName$ + "_prepare.png"
	Set $Img_Plugins$			= "%ScriptPath%\images\" + $Img_BaseName$ + "_plugins.png"
	Set $Img_Update$			= "%ScriptPath%\images\" + $Img_BaseName$ + "_update.png"
endif

comment "preparing..."
ShowBitmap $Img_Prepare$ $ProductName$


;-----------------------------------------------------------
;*** software architecture; valid values: "32 bit", "64 bit", "sysnative"
;-----------------------------------------------------------
;*** simplify SystemType
Switch $SystemType$
	case "64 Bit System"
		Set $SystemType$ = "x64"
	endCase
	case "x86 System"
		Set $SystemType$ = "x32"
	endCase
	defaultCase
		Set $SystemType$ = ""
	endCase
endSwitch


{{#ifdef_x64_only}}
Set $sw_arch$ = "64 bit"
{{/ifdef_x64_only}}
{{^ifdef_x64_only}}
Set $sw_arch$ = GetProductProperty("install_architecture","sysnative")
{{/ifdef_x64_only}}
Set $sw_arch$ = takeString(0, splitString($sw_arch$, " "))

if ( $sw_arch$ = "sysnative" )
	if ($SystemType$ = "x64")
		Set $sw_arch$ = "64"
	else
		Set $sw_arch$ = "32"
	endif
endif


if ($sw_arch$ = "64")
	; 64 bit software
	set $InstallBase$ = "%ProgramFiles64Dir%"
else
	; 32 bit software
	set $InstallBase$ = "%ProgramFiles32Dir%"
endif

if ($SystemType$="x32") and ($sw_arch$="64")
	LogError "Cannot install 64 bit version of " + $ProductName$ + " on a 32 bit operating system!"
	isFatalError
endif

;-----------------------------------------------------------
;*** property: use a local copy of the installer?
;-----------------------------------------------------------
Set $pr_localCopy$          = GetProductProperty("local_installer_copy","False")

;-----------------------------------------------------------
;*** property: language - "de_DE, "en_US"
; application language defined via environment variable LANG
; (not yet implemented!)
;-----------------------------------------------------------
{{#ifdef_property_language}}
Set $sw_lang$ 				= GetProductProperty("default_language","en_US")
{{/ifdef_property_language}}
{{^ifdef_property_language}}
Set $sw_lang$				= ""
{{/ifdef_property_language}}

;-----------------------------------------------------------
;*** property: create desktop/startmenu/quickstart link?
;-----------------------------------------------------------
{{#ifdef_property_desktop_link}}
Set $pr_DesktopLink$ 		= GetProductProperty("link_desktop","False")
{{/ifdef_property_desktop_link}}
{{^ifdef_property_desktop_link}}
Set $pr_DesktopLink$		= "false"
{{/ifdef_property_desktop_link}}

;-----------------------------------------------------------
;*** properties: post install/uninstall
;-----------------------------------------------------------
Set $CustomPostInstall$ 	= getProductProperty("custom_post_install","none")
Set $CustomPostUninstall$ 	= getProductProperty("custom_post_uninstall","none")
Set $pr_SetEnv_JavaHome$	= getProductProperty("set_env_java_home","true")
Set $pr_set_jar_handler$	= getProductProperty("set_jar_handler","true")

;-----------------------------------------------------------
;*** additional paths, binaries, and booleans
;-----------------------------------------------------------
Set $TempDir$			= "%opsiTmpDir%"
set $PSDETAIL$ 			= "%ScriptPath%\bin\psdetail.exe"
if (CompareDotSeparatedNumbers($NTVersion$, ">=", "10.0"))
	set $PSDETAIL$ 		= "%ScriptPath%\bin\psdetail4.exe"
endif
set $PSDETAIL_mod$		= ""
set $GETREALNAME$		= "%ScriptPath%\bin\GetRealName.exe"
set $SEVENZIP$			= "%ScriptPath%\bin\7za.exe"
; changed to "true" on running sub_checkinstance_init:
set $bCheckInstance$ 	= "false"
; changed to "true" on init if $PSDETAIL$ exists:		
set $bPSDetail$			= "false"	


;-----------------------------------------------------------
;*** registry paths:
;-----------------------------------------------------------
Set $RegPathUninstall$	 = "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall"
Set $RegPathUninstall64$ = "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall"
Set $RegPathUninstall32$ = "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall"
if ($SystemType$ = "x32")
	Set $RegPathUninstall32$ = $RegPathUninstall$
endif


;-----------------------------------------------------------
;*** misc settings
;-----------------------------------------------------------
{{#ifdef_property_kill_running}}
Set $bKillRunning$ 				= GetProductProperty("kill_running", "false")
Set $Kill_Applications$ 		= GetProductPropertyList("kill_applic",emptylist($Kill_Applications$))
{{/ifdef_property_kill_running}}

Set $pr_PreUninst$				= GetProductProperty("uninstall_before_setup","True")
Set $pr_silent_option$			= GetProductProperty("silent_option","silent")


;-----------------------------------------------------------
;*** exit code checkers
;-----------------------------------------------------------
include_append "%ScriptPath%\exitcode_inno.opsiinc"
include_append "%ScriptPath%\exitcode_msi.opsiinc"
include_append "%ScriptPath%\exitcode_nsis.opsiinc"


;-----------------------------------------------------------
;*** logs
;-----------------------------------------------------------
Set $LogDir$			= "%opsiLogDir%"
Set $InstallLog$		= $LogDir$ + "\"+$FullProductId$+"_install.log"
Set $UninstallLog$		= $LogDir$ + "\"+$FullProductId$+"_uninstall.log"


;===========================================================
;*** specific settings
;===========================================================
Set $InstallerType$   		= "{{O_USE_INSTALLER}}"

Set $JAVA_VER_FULL$		= "{{O_SOFTWARE_VER}}"
Set $TempList$			= splitString ($JAVA_VER_FULL$,".")
Set $JAVA_VER$			= takestring(0,$TempList$) + "." + takestring(1,$TempList$) + "." + takestring(2,$TempList$)
Set $ProductMajor$		= takeString(0, splitString ($JAVA_VER_FULL$,"."))
if $ProductMajor$ = "8"
	Set $JAVA_SUB_DIR$	= "jdk1.8.0_" + takestring(1,$TempList$)
else
	; works only for Java > 8:
	Set $JAVA_SUB_DIR$	= "jdk" + $JAVA_VER$ + "_" + takestring(3,$TempList$)
endif

Set $SrcDir$			= "%ScriptPath%\files\"
Set $PathPrefix$		= "Corretto" + $ProductMajor$ + "\"

;Set $InstallDir$      	= $InstallBase$ + "\" + $PathPrefix$ + stringReplace($ProductName$," ", "") + "\"
;Set $InstallDir$      	= $InstallBase$ + "\" + $PathPrefix$ + $ProductName$ + "\"
;Set $InstallDir$      	= $InstallBase$ + "\" + $PathPrefix$ + $StrippedProductId$ + "\"
Set $InstallDir$      	= $InstallBase$ + "\" + $PathPrefix$

; Set $CheckBin$      	= "bin\" + $StrippedProductId$ +".exe"
Set $CheckBin$      	= "%\" + $PathPrefix$ + "%\bin\%.exe"
Set $PathToExe$			= $InstallDir$ + $JAVA_SUB_DIR$ + "\bin\java.exe"
if $ProductMajor$ = "8"
	Set $RuntimeLib$	= $InstallDir$ + $JAVA_SUB_DIR$ + "\jre\bin\server\jvm.dll"
else
	Set $RuntimeLib$	= $InstallDir$ + $JAVA_SUB_DIR$ + "\bin\server\jvm.dll"
endif

;-------------------------------------------------------
; filter for opsiServiceCall productOnClient_getObjects:
;-------------------------------------------------------
;Switch $StrippedProductId$
;	Case "corretto"
;		if $ProductMajor$ = "8"
;			Set $ProductFilter$	= "*corretto8$|*corretto$"
;		endif
;		if $ProductMajor$ = "11"
;			Set $ProductFilter$	= "*corretto11$|*corretto$"
;		endif
;		if $ProductMajor$ = "15"
;			Set $ProductFilter$	= "*corretto15$|*corretto$"
;		endif
;		if $ProductMajor$ = "16"
;			Set $ProductFilter$	= "*corretto16$|*corretto$"
;		endif
;	EndCase
;	Case "corretto8"
;		Set $ProductFilter$	= "*corretto8$"
;	EndCase	
;	Case "corretto11"
;		Set $ProductFilter$	= "*corretto11$"
;	EndCase
;	Case "corretto15"
;		Set $ProductFilter$	= "*corretto15$"
;	EndCase
;	Case "corretto16"
;		Set $ProductFilter$	= "*corretto16$"
;	EndCase
;	DefaultCase
;		Set $ProductFilter$	= ""
;	EndCase
;EndSwitch

set $ProductFilter$	= "*corretto*"
set $ProductVersionFilter$ = $ProductMajor$ + ".*"

if ($StrippedProductId$ = "corretto")
	; get current installed main line of corretto:
	set $result$ = productGetOnClientExt('*corretto', '{"installationStatus":"installed"}')
	set $num$ = jsonAsObjectCountElements($result$)
	if ($num$ INT> "0")
		comment "Found " + $num$ + " JSON object(s)."
		if ($num$ INT> "1")
			logWarning "Expecting only one match for installed product; found " + $num$ + "; consider the first entry only"
		endif
		set $prevMajor$ = jsonAsObjectGetValueByKey(jsonAsArrayGetElementByIndex($result$,"0"), "productVersion")
	endif
	if ($prevMajor$ = "")
		set $prevMajor$ = $InstalledVersion$
	endif
	if not ($prevMajor$ = "")
		comment "Installed Corretto main line: " + $prevMajor$
		set $prevMajor$ = stringReplaceRegex($prevMajor$, '^([0-9]+)\..*$','$1')
		set $prevProductVersionFilter$ = $prevMajor$ + ".*"
		; this is not exact for previous 32 bit release:
		set $prevInstallDir$ = "%ProgramFiles64Dir%\Corretto" + $prevMajor$ +"\"
	else
		logError "Failed to get installed Corretto main line version"
	endif
	if ($prevMajor$ = $ProductMajor$)
		set $prevMajor$ = ''
		set $prevProductVersionFilter$ = ''
		comment "Previously installed main line major release matches current version"
	endif
else
	set $prevMajor$ = ''
	set $prevProductVersionFilter$ = ''
endif

;-------------------------------------------
; samples for known installers
;-------------------------------------------
; amazon-corretto-${Version}-windows-x64.msi
; amazon-corretto-${Version}-windows-x86.msi
; $Version$  = O_SOFTWARE_VER

Switch $sw_arch$
	Case "32"
		if ($ProductMajor$ = "8")
			Set $INSTALLER_BASE$	= "amazon-corretto-{{O_SOFTWARE_VER}}-windows-x86-jdk"
		else
			Set $INSTALLER_BASE$	= "amazon-corretto-{{O_SOFTWARE_VER}}-windows-x86"
		endif
	EndCase
	Case "64"
		if ($ProductMajor$ = "8")
			Set $INSTALLER_BASE$	= "amazon-corretto-{{O_SOFTWARE_VER}}-windows-x64-jdk"
		else
			Set $INSTALLER_BASE$	= "amazon-corretto-{{O_SOFTWARE_VER}}-windows-x64"
		endif
	EndCase	
	DefaultCase
		isFatalError	"Unsupported architecture: " + $sw_arch$
	EndCase
EndSwitch


Switch $ProductMajor$
	Case "8"
		Set $SpaceReqInstall$   = "320"
		Set $SpaceReqPackage$   = "120"
		;---------------------------------
		;*** select MSI features
		;---------------------------------
		if $pr_SetEnv_JavaHome$ = "True"
			Set $MSI_Features$ 	= ' ADDLOCAL="FeatureMain,FeatureSetupEnv,FeatureAddPath,FeatureSetupJavaHome"'
		else
			Set $MSI_Features$ 	= ' ADDLOCAL="FeatureMain,FeatureSetupEnv"'
		endif
	EndCase
	Case "11"
		Set $SpaceReqInstall$   = "330"
		Set $SpaceReqPackage$   = "170"
		;---------------------------------
		;*** select MSI features
		;---------------------------------
		if $pr_SetEnv_JavaHome$ = "True"
			Set $MSI_Features$ 	= ' ADDLOCAL="FeatureMain,FeatureSetupEnv,FeatureSetupEnvVars,FeatureSetupRegistry"'
		else
			Set $MSI_Features$ 	= ' ADDLOCAL="FeatureMain,FeatureSetupEnv,FeatureSetupRegistry"'
		endif
	EndCase
	Case "15"
		Set $SpaceReqInstall$   = "400"
		Set $SpaceReqPackage$   = "180"
		;---------------------------------
		;*** select MSI features
		;---------------------------------
		if $pr_SetEnv_JavaHome$ = "True"
			Set $MSI_Features$ 	= ' ADDLOCAL="FeatureMain,FeatureSetupEnv,FeatureSetupEnvVars,FeatureSetupRegistry"'
		else
			Set $MSI_Features$ 	= ' ADDLOCAL="FeatureMain,FeatureSetupEnv,FeatureSetupRegistry"'
		endif
	EndCase
	Case "16"
		Set $SpaceReqInstall$   = "420"
		Set $SpaceReqPackage$   = "185"
		;---------------------------------
		;*** select MSI features
		;---------------------------------
		if $pr_SetEnv_JavaHome$ = "True"
			Set $MSI_Features$ 	= ' ADDLOCAL="FeatureMain,FeatureSetupEnv,FeatureSetupEnvVars,FeatureSetupRegistry"'
		else
			Set $MSI_Features$ 	= ' ADDLOCAL="FeatureMain,FeatureSetupEnv,FeatureSetupRegistry"'
		endif
	EndCase
	Case "17"
		Set $SpaceReqInstall$   = "330"
		Set $SpaceReqPackage$   = "170"
		;---------------------------------
		;*** select MSI features
		;---------------------------------
		if $pr_SetEnv_JavaHome$ = "True"
			Set $MSI_Features$ 	= ' ADDLOCAL="FeatureMain,FeatureSetupEnv,FeatureSetupEnvVars,FeatureSetupRegistry"'
		else
			Set $MSI_Features$ 	= ' ADDLOCAL="FeatureMain,FeatureSetupEnv,FeatureSetupRegistry"'
		endif
	EndCase
	Case "18"
		Set $SpaceReqInstall$   = "450"
		Set $SpaceReqPackage$   = "200"
		;---------------------------------
		;*** select MSI features
		;---------------------------------
		if $pr_SetEnv_JavaHome$ = "True"
			Set $MSI_Features$ 	= ' ADDLOCAL="FeatureMain,FeatureSetupEnv,FeatureSetupEnvVars,FeatureSetupRegistry"'
		else
			Set $MSI_Features$ 	= ' ADDLOCAL="FeatureMain,FeatureSetupEnv,FeatureSetupRegistry"'
		endif
	EndCase
	Case "19"
		Set $SpaceReqInstall$   = "450"
		Set $SpaceReqPackage$   = "200"
		;---------------------------------
		;*** select MSI features
		;---------------------------------
		if $pr_SetEnv_JavaHome$ = "True"
			Set $MSI_Features$ 	= ' ADDLOCAL="FeatureMain,FeatureSetupEnv,FeatureSetupEnvVars,FeatureSetupRegistry"'
		else
			Set $MSI_Features$ 	= ' ADDLOCAL="FeatureMain,FeatureSetupEnv,FeatureSetupRegistry"'
		endif
	EndCase
	Case "20"
		Set $SpaceReqInstall$   = "470"
		Set $SpaceReqPackage$   = "200"
		;---------------------------------
		;*** select MSI features
		;---------------------------------
		if $pr_SetEnv_JavaHome$ = "True"
			Set $MSI_Features$ 	= ' ADDLOCAL="FeatureMain,FeatureSetupEnv,FeatureSetupEnvVars,FeatureSetupRegistry"'
		else
			Set $MSI_Features$ 	= ' ADDLOCAL="FeatureMain,FeatureSetupEnv,FeatureSetupRegistry"'
		endif
	EndCase
	Case "21"
		Set $SpaceReqInstall$   = "350"
		Set $SpaceReqPackage$   = "190"
		;---------------------------------
		;*** select MSI features
		;---------------------------------
		if $pr_SetEnv_JavaHome$ = "True"
			Set $MSI_Features$ 	= ' ADDLOCAL="FeatureMain,FeatureSetupEnv,FeatureSetupEnvVars,FeatureSetupRegistry"'
		else
			Set $MSI_Features$ 	= ' ADDLOCAL="FeatureMain,FeatureSetupEnv,FeatureSetupRegistry"'
		endif
	EndCase
	Case "22"
		Set $SpaceReqInstall$   = "350"
		Set $SpaceReqPackage$   = "190"
		;---------------------------------
		;*** select MSI features
		;---------------------------------
		if $pr_SetEnv_JavaHome$ = "True"
			Set $MSI_Features$ 	= ' ADDLOCAL="FeatureMain,FeatureSetupEnv,FeatureSetupEnvVars,FeatureSetupRegistry"'
		else
			Set $MSI_Features$ 	= ' ADDLOCAL="FeatureMain,FeatureSetupEnv,FeatureSetupRegistry"'
		endif
	EndCase
	DefaultCase
		LogError "Unsupported Java major release: " + $ProductMajor$
		isFatalError
	EndCase
EndSwitch

if $pr_localCopy$ = "True"
	Set $MinimumSpace$ 	= calculate($SpaceReqInstall$ + "+" + $SpaceReqPackage$) + " MB"
else
	Set $MinimumSpace$ 	= $SpaceReqInstall$ + " MB"
endif

Set $SearchPattern$ 	= "Amazon Corretto"
Set $Uninst_ID_std$	   	= $ProductName$
Set $Uninst_Prg$       	= "unins000.exe"
Set $Uninstaller$	   	= $InstallDir$ + $Uninst_Prg$
; ...oder UninstallString aus Registry

;---------------------------------
;*** set verbosity of (un)installer
;---------------------------------
if $InstallerType$ = "INNO"
	Switch $pr_silent_option$
		Case "silent"
			Set $Verbosity$ = "/SILENT"
		EndCase
		Case "very silent"
			Set $Verbosity$ = "/VERYSILENT"
		EndCase
		DefaultCase
			Set $Verbosity$ = ""
		EndCase
	EndSwitch
endif
if $InstallerType$ = "MSI"
	Switch $pr_silent_option$
		Case "silent"
			Set $Verbosity$ = "/qb-!"
		EndCase
		Case "very silent"
			Set $Verbosity$ = "/qn"
		EndCase
		DefaultCase
			Set $Verbosity$ = ""
		EndCase
	EndSwitch
endif

;---------------------------------
;*** specific Installer/Uninstaller options:
;---------------------------------
Switch $InstallerType$
Case "INNO"
	;============= INNO ============= (not used here)
	isFatalError "FATAL ERROR: Unsupported installer type [" + $InstallerType$ + "]"
	Set $InstallerFile$		= $INSTALLER_BASE$ + ".exe"
	Set $INNO_Setup_Inf$	= "%ScriptPath%\files\setup_corretto.inf"
	Set $INNO_Inst_Opts$    = '/SP- ' + $Verbosity$ + ' /NOCANCEL /NORESTART /CLOSEAPPLICATIONS /SUPPRESSMSGBOXES /LANG=english /DIR="' + $InstallDir$ +'" /GROUP="' + $ProductName$ +'" /LOADINF="+ $INNO_Setup_Inf$ +" /LOG="'+ $InstallLog$ +'"'
	Set $INNO_Uninst_Opts$  = $Verbosity$ + ' /NORESTART /LOG="'+ $UninstallLog$ +'"'
EndCase	
Case "MSI"
	;============= MSI ==============
	Set $InstallerFile$		= $INSTALLER_BASE$ + ".msi"
	Set $MSI_Inst_Opts$ 	= $Verbosity$ + ' /norestart /l+* "' + $InstallLog$ +'" INSTALLDIR="' + $InstallDir$ + '" REBOOT=ReallySuppress ALLUSERS=1 ' + $MSI_Features$
	; $Installer is determined later!:
	;Set $MSI_Inst_Cmd$		= 'msiexec /i "' + $Installer$ +'" ' + $MSI_Inst_Opts$
	Set $MSI_Uninst_Opts$  	= $Verbosity$ + ' /norestart /l+* "' + $UninstallLog$ + '" REBOOT=ReallySuppress'
	Set $MSI_Uninst_Cmd$ 	= "msiexec /x $ProductKey$ " + $Uninst_Opts$
EndCase
Case "NSIS"
	;=== NSIS === (not used here)
	isFatalError "FATAL ERROR: Unsupported installer type [" + $InstallerType$ + "]"
	Set $InstallerFile$		= $INSTALLER_BASE$ + ".exe"
	Set $NSIS_Inst_Opts$  	= "/S  /D=" + $InstallDir$
	Set $NSIS_Uninst_Opts$ 	= "/S"
EndCase
DefaultCase
	isFatalError "FATAL ERROR: Unknown installer type [" + $InstallerType$ + "]"
EndCase
EndSwitch

Set $InstallerSrc$		    = "%ScriptPath%\files\" + $InstallerFile$
if not (FileExists($InstallerSrc$))
	LogError "FATAL ERROR: Installer not found [" + $InstallerSrc$ + "]"
	isFatalError
endif
